using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Threading;
using HotPreview.SharedModel.Protocol;
using Microsoft.Build.Framework;
using StreamJsonRpc;

namespace HotPreview.AppBuildTasks
{
    public class GeneratePreviewAppSettingsTask : Microsoft.Build.Utilities.Task
    {
        [Required]
        public required string ProjectPath { get; set; }

        [Required]
        public required string OutputPath { get; set; }

        [Required]
        public required string PlatformPreviewApplication { get; set; }

        private static string HotPreviewConfigDir
        {
            get
            {
                string localAppDataDir = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                return Path.Combine(localAppDataDir, "HotPreview");
            }
        }

        private static string DevToolsLaunchingLockFilePath => Path.Combine(HotPreviewConfigDir, "devtools-launching.lock");

        public override bool Execute()
        {
            try
            {
                string projectPath = Path.GetFullPath(ProjectPath);
                string outputPath = Path.GetFullPath(OutputPath);
                string? outputDirectory = Path.GetDirectoryName(outputPath);

                if (outputDirectory is not null && !Directory.Exists(outputDirectory))
                {
                    Directory.CreateDirectory(outputDirectory);
                }

                // Ensure DevTools is running and retrieve its connection info via JSON-RPC over TCP
                string connectionString = string.Empty;
                if (!TryGetToolingInfoViaSocket(out ToolingInfo? info, TimeSpan.FromMilliseconds(750)))
                {
                    if (!LaunchDevToolsAppWithLock())
                    {
                        return true;   // Errors already logged, but don't fail the build
                    }

                    // Wait for DevTools to report ready over the socket
                    if (!WaitForSocketReady(out info, TimeSpan.FromSeconds(10)))
                    {
                        Log.LogWarning("Hot Preview: DevTools did not report ready over the TCP endpoint");
                        // Leave connectionString empty; the preview app will run without tooling connection
                    }
                }

                if (info is not null && !string.IsNullOrWhiteSpace(info.AppConnectionString))
                {
                    connectionString = info.AppConnectionString ?? string.Empty;
                }

                string content = $$"""
// <auto-generated/>
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace HotPreview.SharedModel
{
    public static class PreviewApplicationInitializer
    {
        [ModuleInitializer]
        public static void Initialize()
        {
            var previewApp = {{PlatformPreviewApplication}};
            if (previewApp != null)
            {
                previewApp.MainAssembly = typeof(PreviewApplicationInitializer).Assembly;
                previewApp.ProjectPath = @"{{projectPath.Replace("\"", "\"\"")}}";
                previewApp.ToolingConnectionString = @"{{connectionString.Replace("\"", "\"\"")}}";
                {{(connectionString != "" ? "previewApp.StartToolingConnection();" : "// No tooling connection, so not starting connection")}}
            }
        }
    }
}
""";

                File.WriteAllText(outputPath, content);

                string relativeOutputPath = Path.Combine(Path.GetFileName(Path.GetDirectoryName(outputPath)) ?? string.Empty, Path.GetFileName(outputPath));
                Log.LogMessage(MessageImportance.High, $"Hot Preview: Generating DevTools connection settings in {relativeOutputPath}");

                return true;
            }
            catch (Exception ex)
            {
                Log.LogWarning($"Hot Preview: Error generating DevTools connection settings: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Launches the DevTools app with file-based locking to handle concurrent execution.
        /// Different processes (like MSBuild and devenv when doing a rebuild all in VS) may execute
        /// this task during the build. This method uses an exclusive file lock to ensure the app
        /// is only launched once, with any other launch attempts waiting on the first one to complete.
        /// </summary>
        private bool LaunchDevToolsAppWithLock()
        {
            string lockFilePath = DevToolsLaunchingLockFilePath;
            string lockFileDirectory = Path.GetDirectoryName(lockFilePath);

            if (!Directory.Exists(lockFileDirectory))
            {
                Directory.CreateDirectory(lockFileDirectory);
            }

            // Try to create and hold an exclusive lock on the file
            try
            {
                string lockContent = $"Launched by process {Process.GetCurrentProcess().ProcessName} {Process.GetCurrentProcess().Id} at {DateTime.UtcNow:O}";
                using var lockFile = LockFile.Create(lockFilePath, lockContent);

                Log.LogMessage(MessageImportance.Low, "Hot Preview: Acquired launch lock, launching DevTools app...");

                // Launch the app while holding the exclusive lock
                return LaunchDevToolsApp();

                // Lock file will be automatically deleted when disposed
            }
            catch (IOException ex) when (ex.HResult == unchecked((int)0x80070020)) // File is being used by another process
            {
                Log.LogMessage(MessageImportance.Low, "Hot Preview: Another process is launching DevTools app, waiting...");
                return WaitForLaunchCompletion(lockFilePath);
            }
            catch (Exception ex)
            {
                Log.LogWarning($"Hot Preview: Failed to create launch lock file: {ex.Message}");
                return false;
            }
        }

        private bool WaitForLaunchCompletion(string lockFilePath)
        {
            var timeout = TimeSpan.FromSeconds(10); // Longer timeout for waiting on another process
            var stopwatch = Stopwatch.StartNew();

            while (stopwatch.Elapsed < timeout)
            {
                // Check if the lock file is gone (launch completed)
                if (!File.Exists(lockFilePath))
                {
                    // Lock file is gone, wait briefly for the TCP endpoint to be ready
                    if (WaitForSocketReady(out _, TimeSpan.FromSeconds(5)))
                    {
                        Log.LogMessage(MessageImportance.Low, "Hot Preview: DevTools launched by a different build task");
                        return true;
                    }
                    Log.LogWarning("Hot Preview: A different build task finished launching DevTools but it did not report readiness");
                    return false;
                }

                Thread.Sleep(200); // Check every 200ms
            }

            // Timeout reached - the other process might have failed
            Log.LogWarning("Hot Preview: Timeout waiting for another build task to launch DevTools");
            return false;
        }

        // Uses shared DTO: HotPreview.SharedModel.Protocol.ToolingInfo

        private bool TryGetToolingInfoViaSocket(out ToolingInfo? info, TimeSpan timeout)
        {
            info = null;
            try
            {
                // First try localhost
                if (TryConnectAndQuery("127.0.0.1", timeout, out info))
                {
                    return true;
                }

                // If running under WSL, try Windows host IP from /etc/resolv.conf
                if (IsRunningUnderWSL())
                {
                    string? hostIp = GetWindowsHostIpFromResolvConf();
                    if (!string.IsNullOrWhiteSpace(hostIp) && TryConnectAndQuery(hostIp!, timeout, out info))
                    {
                        return true;
                    }
                }

                return false;
            }
            catch (TimeoutException)
            {
                return false;
            }
            catch (IOException)
            {
                return false;
            }
            catch (Exception ex)
            {
                Log.LogMessage(MessageImportance.Low, $"Hot Preview: Socket RPC error: {ex.Message}");
                return false;
            }
        }

        private static bool TryConnectAndQuery(string host, TimeSpan timeout, out ToolingInfo? info)
        {
            info = null;
            try
            {
                using var client = new TcpClient();
                Task connectTask = client.ConnectAsync(host, 54242);
                if (!connectTask.Wait((int)timeout.TotalMilliseconds))
                {
                    return false;
                }
                using NetworkStream ns = client.GetStream();
                using var rpc = new JsonRpc(ns, ns);
                rpc.StartListening();
                info = rpc.InvokeWithParameterObjectAsync<ToolingInfo>("getToolingInfo", argument: null, cancellationToken: CancellationToken.None).GetAwaiter().GetResult();
                return info is not null;
            }
            catch
            {
                return false;
            }
        }

        private bool WaitForSocketReady(out ToolingInfo? info, TimeSpan timeout)
        {
            var sw = Stopwatch.StartNew();
            info = null;
            while (sw.Elapsed < timeout)
            {
                if (TryGetToolingInfoViaSocket(out ToolingInfo? i, TimeSpan.FromMilliseconds(500)) && i is not null)
                {
                    if (!string.IsNullOrWhiteSpace(i.AppConnectionString))
                    {
                        info = i;
                        return true;
                    }
                }
                Thread.Sleep(200);
            }
            return false;
        }

        private bool LaunchDevToolsApp()
        {
            try
            {
                var startInfo = new ProcessStartInfo
                {
                    FileName = "hot-preview",
                    Arguments = "--launch",
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                };

                Log.LogMessage(MessageImportance.High, "Hot Preview: Launching DevTools...");

                using var process = Process.Start(startInfo);
                if (process is null)
                {
                    Log.LogWarning("Hot Preview: Failed to start hot-preview process");
                    return false;
                }

                process.WaitForExit();

                if (process.ExitCode != 0)
                {
                    string errorOutput = process.StandardError.ReadToEnd();
                    Log.LogWarning($"Hot Preview: hot-preview failed with exit code {process.ExitCode}: {errorOutput}");
                    return false;
                }

                // Wait for DevTools to report ready over TCP
                if (!WaitForSocketReady(out _, TimeSpan.FromSeconds(10)))
                {
                    Log.LogWarning("Hot Preview: DevTools launched but did not report readiness over the TCP endpoint");
                    return false;
                }

                Log.LogMessage(MessageImportance.Low, $"Hot Preview: Launched DevTools");
                return true;
            }
            // When the hot-preview executable is not found, an E_FAIL Win32Exception is thrown with the message below.
            // For English systems, match on the message.
            catch (Win32Exception ex) when (ex.Message.Contains("The system cannot find the file specified"))
            {
                Log.LogWarning("Hot Preview: hot-preview not found.");
                Log.LogWarning("Hot Preview: Install it via e.g.: dotnet tool install --global HotPreview.DevTools");
                return false;
            }
            // In other cases, including non-English systems, log a more generic message that covers the not installed case too.
            catch (Exception ex)
            {
                Log.LogWarning($"Hot Preview: Error launching hot-preview: {ex}");
                Log.LogWarning("Hot Preview: Ensure it is installed via e.g.: dotnet tool install --global HotPreview.DevTools");
                return false;
            }
        }

        private static bool IsRunningUnderWSL()
        {
            try
            {
                return !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("WSL_DISTRO_NAME"));
            }
            catch { return false; }
        }

        private static string? GetWindowsHostIpFromResolvConf()
        {
            try
            {
                foreach (string line in File.ReadAllLines("/etc/resolv.conf"))
                {
                    if (line.StartsWith("nameserver ", StringComparison.OrdinalIgnoreCase))
                    {
                        string[] parts = line.Split(new[] { ' ', '	' }, StringSplitOptions.RemoveEmptyEntries);
                        string ip = parts.Length >= 2 ? parts[1] : "";
                        if (!string.IsNullOrWhiteSpace(ip))
                        {
                            return ip;
                        }
                    }
                }
            }
            catch
            {
                // ignored
            }
            return null;
        }
    }
}
