using System.Net.Sockets;
using HotPreview.SharedModel.Protocol;
using Microsoft.Build.Framework;

namespace HotPreview.AppBuildTasks
{
    public class GeneratePreviewAppSettingsTask : Microsoft.Build.Utilities.Task
    {
        [Required]
        public string ProjectPath { get; set; } = "";

        [Required]
        public string OutputPath { get; set; } = "";

        [Required]
        public string PlatformPreviewApplication { get; set; } = "";

        public override bool Execute()
        {
            try
            {
                string projectPath = Path.GetFullPath(ProjectPath);
                string outputPath = Path.GetFullPath(OutputPath);
                string? outputDirectory = Path.GetDirectoryName(outputPath);

                if (outputDirectory is not null && !Directory.Exists(outputDirectory))
                {
                    Directory.CreateDirectory(outputDirectory);
                }

                // Get connection info from a running DevTools instance; otherwise fall back to a default.
                string connectionString;
                if (TryGetToolingInfoViaSocket(out ToolingInfo? info, TimeSpan.FromMilliseconds(750)) &&
                    info is not null && !string.IsNullOrWhiteSpace(info.AppConnectionString))
                {
                    connectionString = info.AppConnectionString!;
                    Log.LogMessage(MessageImportance.Low, "Hot Preview: Using connection info from running DevTools");
                }
                else
                {
                    // DevTools not running; compute the default connection string using the same logic DevTools uses
                    connectionString = BuildDefaultConnectionString();
                    Log.LogMessage(MessageImportance.Low, $"Hot Preview: Using default connection string '{connectionString}'");
                }

                string content = $$"""
// <auto-generated/>
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace HotPreview.SharedModel
{
    public static class PreviewApplicationInitializer
    {
        [ModuleInitializer]
        public static void Initialize()
        {
            var previewApp = {{PlatformPreviewApplication}};
            if (previewApp != null)
            {
                previewApp.MainAssembly = typeof(PreviewApplicationInitializer).Assembly;
                previewApp.ProjectPath = @"{{projectPath.Replace("\"", "\"\"")}}";
                previewApp.ToolingConnectionString = @"{{connectionString.Replace("\"", "\"\"")}}";
                previewApp.StartToolingConnection();
            }
        }
    }
}
""";

                File.WriteAllText(outputPath, content);

                string relativeOutputPath = Path.Combine(Path.GetFileName(Path.GetDirectoryName(outputPath)) ?? string.Empty, Path.GetFileName(outputPath));
                Log.LogMessage(MessageImportance.High, $"Hot Preview: Generating DevTools connection settings in {relativeOutputPath}");

                return true;
            }
            catch (Exception ex)
            {
                Log.LogWarning($"Hot Preview: Error generating DevTools connection settings: {ex.Message}");
                return false;
            }
        }


        /// <summary>
        /// Builds the default connection string, matching the logic used by DevTools.
        /// Format: "ip1,ip2,...,ipN:port" with IPv4 addresses and the default port 54242.
        /// </summary>
        private static string BuildDefaultConnectionString()
        {
            const int defaultPort = 54242; // ToolingAppServerConnectionListener.DefaultPort
            List<string> addresses = ["127.0.0.1"];

            try
            {
                addresses.AddRange(System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces()
                    .Where(ni => ni.OperationalStatus == System.Net.NetworkInformation.OperationalStatus.Up)
                    .SelectMany(ni => ni.GetIPProperties().UnicastAddresses)
                    .Where(ip => ip.Address.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork && !System.Net.IPAddress.IsLoopback(ip.Address))
                    .Select(ip => ip.Address.ToString())
                    .Distinct());
            }
            catch
            {
                // Fallback to loopback only
            }

            return $"{string.Join(",", addresses)}:{defaultPort}";
        }

        private bool TryGetToolingInfoViaSocket(out ToolingInfo? info, TimeSpan timeout)
        {
            info = null;
            try
            {
                // First try localhost
                if (TryConnectAndQuery("127.0.0.1", timeout, out info))
                {
                    return true;
                }

                // If running under WSL, try Windows host IP from /etc/resolv.conf
                if (IsRunningUnderWSL())
                {
                    string? hostIp = GetWindowsHostIpFromResolvConf();
                    if (!string.IsNullOrWhiteSpace(hostIp) && TryConnectAndQuery(hostIp!, timeout, out info))
                    {
                        return true;
                    }
                }

                return false;
            }
            catch (Exception ex)
            {
                Log.LogWarning($"Hot Preview: Socket RPC error: {ex.Message}");
                return false;
            }
        }

        private bool TryConnectAndQuery(string host, TimeSpan timeout, out ToolingInfo? info)
        {
            info = null;
            try
            {
                using var client = new TcpClient();
                Task connectTask = client.ConnectAsync(host, 54242);
                if (!connectTask.Wait((int)timeout.TotalMilliseconds))
                {
                    return false;
                }

                using NetworkStream ns = client.GetStream();
                using var rpc = new HotPreviewJsonRpc(ns, ns);
                rpc.StartListening();
                info = rpc.InvokeWithParameterObjectAsync<ToolingInfo>("getToolingInfo", argument: null, cancellationToken: CancellationToken.None).GetAwaiter().GetResult();
                return info is not null;
            }
            catch (Exception ex)
            {
                Log.LogWarning($"Hot Preview: Error connecting to DevTools app: {ex.Message}");
                return false;
            }
        }

        private static bool IsRunningUnderWSL()
        {
            try
            {
                return !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("WSL_DISTRO_NAME"));
            }
            catch { return false; }
        }

        private static string? GetWindowsHostIpFromResolvConf()
        {
            try
            {
                foreach (string line in File.ReadAllLines("/etc/resolv.conf"))
                {
                    if (line.StartsWith("nameserver ", StringComparison.OrdinalIgnoreCase))
                    {
                        string[] parts = line.Split(new[] { ' ', '	' }, StringSplitOptions.RemoveEmptyEntries);
                        string ip = parts.Length >= 2 ? parts[1] : "";
                        if (!string.IsNullOrWhiteSpace(ip))
                        {
                            return ip;
                        }
                    }
                }
            }
            catch
            {
                // ignored
            }
            return null;
        }
    }
}
