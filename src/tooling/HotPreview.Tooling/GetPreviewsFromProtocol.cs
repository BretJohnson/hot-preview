using HotPreview.SharedModel;
using HotPreview.SharedModel.Protocol;

namespace HotPreview.Tooling;

public class GetPreviewsFromProtocol : PreviewsManagerBuilderTooling
{
    /// <summary>
    /// Initializes a new instance of GetPreviewsFromProtocol and processes the application information from the app,
    /// creating and organizing UI components and commands based on the provided data.
    /// </summary>
    /// <param name="appInfo">Application information from the protocol containing components and commands</param>
    public GetPreviewsFromProtocol(AppInfo appInfo)
    {
        foreach (UIComponentInfo uiComponentInfo in appInfo.Components)
        {
            // Create the UI component and add it to the builder
            UIComponentKind componentKind = UIComponentKindInfo.ToUIComponentKind(uiComponentInfo.UIComponentKind);
            var uiComponent = new UIComponentTooling(componentKind, uiComponentInfo.Name, uiComponentInfo.DisplayName,
                uiComponentInfo.Previews.Select(CreatePreview).ToList());

            // Add the component to the builder
            AddOrUpdateUIComponent(uiComponent);
        }

        foreach (CommandInfo commandInfo in appInfo.Commands)
        {
            // Create the command and add it to the builder
            var command = new CommandTooling(commandInfo.Name, commandInfo.DisplayName);
            AddOrUpdateCommand(command);
        }
    }

    /// <summary>
    /// Creates a PreviewTooling object from protocol PreviewInfo.
    /// </summary>
    /// <param name="previewInfo">Preview information from the protocol</param>
    /// <returns>A PreviewTooling object</returns>
    private static PreviewTooling CreatePreview(PreviewInfo previewInfo)
    {
        return previewInfo.PreviewType switch
        {
            PreviewTypeInfo.Class => new PreviewClassTooling(previewInfo.Name, previewInfo.DisplayName, previewInfo.AutoGenerated),
            PreviewTypeInfo.StaticMethod => new PreviewStaticMethodTooling(previewInfo.Name, previewInfo.DisplayName),
            _ => throw new NotImplementedException($"Unknown preview type: {previewInfo.PreviewType}")
        };
    }
}
