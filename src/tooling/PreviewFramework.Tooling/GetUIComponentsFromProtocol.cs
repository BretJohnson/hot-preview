using PreviewFramework.Model;
using PreviewFramework.Model.Protocol;

namespace PreviewFramework.Tooling;

public class GetUIComponentsFromProtocol : UIComponentsManagerBuilderBase<UIComponent, Preview>
{
    /// <summary>
    /// Initializes a new instance of GetUIComponentsFromApp and processes the UI component information from the app,
    /// returned via the protocol.
    /// </summary>
    /// <param name="uiComponentInfos">Array of UI component information from the protocol</param>
    public GetUIComponentsFromProtocol(UIComponentInfo[] uiComponentInfos)
    {
        foreach (UIComponentInfo uiComponentInfo in uiComponentInfos)
        {
            // Create the UI component with the display name and kind from protocol
            UIComponentKind componentKind = UIComponentKindInfo.ToUIComponentKind(uiComponentInfo.UIComponentKindInfo);
            UIComponent uiComponent = new UIComponent(componentKind, uiComponentInfo.Name, uiComponentInfo.DisplayName);

            // Add previews from the protocol
            foreach (PreviewInfo previewInfo in uiComponentInfo.Previews)
            {
                Preview preview = CreatePreview(previewInfo);
                uiComponent.AddPreview(preview);
            }

            // Add the component to the builder
            AddOrUpdateUIComponent(uiComponent);
        }
    }

    /// <summary>
    /// Creates an immutable UIComponentsManager from the builder's current state.
    /// </summary>
    /// <returns>An immutable UIComponentsManager containing all the builder's data</returns>
    public UIComponentsManager ToImmutable()
    {
        Validate();

        return new UIComponentsManager(UIComponentsByName, Categories);
    }

    /// <summary>
    /// Creates a Preview object from protocol PreviewInfo.
    /// </summary>
    /// <param name="previewInfo">Preview information from the protocol</param>
    /// <returns>A Preview object</returns>
    private static Preview CreatePreview(PreviewInfo previewInfo)
    {
        return previewInfo.PreviewType switch
        {
            PreviewTypeInfo.Class => new PreviewClass(previewInfo.Name, previewInfo.DisplayName, previewInfo.IsAutoGenerated),
            PreviewTypeInfo.StaticMethod => new PreviewStaticMethod(previewInfo.Name, previewInfo.DisplayName),
            _ => throw new ArgumentException($"Unknown preview type: {previewInfo.PreviewType}", nameof(previewInfo))
        };
    }
}
